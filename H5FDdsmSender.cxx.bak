#include "H5FDdsmTest.h"
#include "H5FDdsm.h"
//
#include <hdf5.h>
#include <time.h>
#include <cstdlib>
#include <stdio.h>

#define FILE "youbot.h5"

//----------------------------------------------------------------------------
int main(int argc, char * argv[])
{
  MPI_Comm comm = MPI_COMM_WORLD;
  H5FDdsmManager *dsmManager = new H5FDdsmManager();
  senderInit(argc, argv, dsmManager, &comm);

  ///////////////////////////////////
  //        initiation             //
  ///////////////////////////////////
   hid_t       file_id, group_id, dataset_id, dataspace_id;  /* identifiers */
   hsize_t     dims[2];
   herr_t      status;
   int         i, j, timestamp_data[3][3], dset2_data[2][10];
   double      arm_jnt_pos[5];
   double      kdl_rotation_data[9];
   double      kdl_vector_x[1], kdl_vector_y[1], kdl_vector_z[1];

   time_t      now;
   char*       time_string;

   // Initialize the first dataset.
   for (i = 0; i < 3; i++)
      for (j = 0; j < 3; j++)
         timestamp_data[i][j] = j + 1;

   // Get seconds passed since epoch
   now = time(NULL);
   printf("Current unix time is %d\n", now);
   time_string = ctime(&now);
   printf("Current time is %s", time_string);

   // Initialize the second dataset.
   for (i = 0; i < 2; i++)
      for (j = 0; j < 10; j++)
         dset2_data[i][j] = j + 1;

   // Initialize arm_jnt_pos dataset.
   for (i=0;i<5;i++)
       arm_jnt_pos[i]= i + 1.2;

   // Initialize rotation dataset.
   for (i=0;i<9;i++)
       kdl_rotation_data[i]= i + 1.4;

   kdl_vector_x[0] = 3.342;
   kdl_vector_y[0] = 3.452;
   kdl_vector_z[0] = 2.523;

  // Create Array
  int array[3] = { 1, 2, 3 };
  int read_array[3];
  hsize_t arraySize = 3;

  // Set file access property list for DSM
  hid_t fapl = H5Pcreate(H5P_FILE_ACCESS);

  // Use DSM driver
  H5Pset_fapl_dsm(fapl, comm, NULL, 0);

  // Create DSM
  hid_t hdf5Handle = H5Fcreate(FILE, H5F_ACC_TRUNC, H5P_DEFAULT, fapl);

  // Close file access property list
  H5Pclose(fapl);

   group_id = H5Gcreate2(hdf5Handle, "/State", H5P_DEFAULT, H5P_DEFAULT, H5P_DEFAULT);

   H5Gclose(group_id);

   group_id = H5Gcreate2(hdf5Handle, "/State/Timestamp", H5P_DEFAULT, H5P_DEFAULT, H5P_DEFAULT);

   H5Gclose(group_id);

   group_id = H5Gcreate2(hdf5Handle, "State/ArmJointPosition", H5P_DEFAULT, H5P_DEFAULT, H5P_DEFAULT);

   H5Gclose(group_id);

   group_id = H5Gcreate2(hdf5Handle, "State/BaseCartesianPosition", H5P_DEFAULT, H5P_DEFAULT, H5P_DEFAULT);

   H5Gclose(group_id);

   group_id = H5Gcreate2(hdf5Handle, "State/BaseCartesianPosition/Vector", H5P_DEFAULT, H5P_DEFAULT, H5P_DEFAULT);

   H5Gclose(group_id);

   group_id = H5Gcreate2(hdf5Handle, "State/BaseCartesianPosition/Rotation", H5P_DEFAULT, H5P_DEFAULT, H5P_DEFAULT);

   H5Gclose(group_id);

/*

   dims[0] = 3;
   dims[1] = 3;
   dataspace_id = H5Screate_simple(2, dims, NULL);

   dataset_id = H5Dcreate2(hdf5Handle, "/State/Timestamp/timestamp", H5T_STD_I32BE, dataspace_id,
                          H5P_DEFAULT, H5P_DEFAULT, H5P_DEFAULT);

   status = H5Dwrite(dataset_id, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, H5P_DEFAULT,
                     timestamp_data);

   status = H5Sclose(dataspace_id);

   status = H5Dclose(dataset_id);

*/

   // New version with real timestamp

   dims[0] = 1;
   dims[1] = 1;
   dataspace_id = H5Screate_simple(2, dims, NULL);

   dataset_id = H5Dcreate2(hdf5Handle, "/State/Timestamp/timestamp", H5T_NATIVE_CHAR, dataspace_id,
                          H5P_DEFAULT, H5P_DEFAULT, H5P_DEFAULT);
   
   status = H5Dwrite(dataset_id, H5T_NATIVE_CHAR, H5S_ALL, H5S_ALL, H5P_DEFAULT,
                     time_string);
   
   status = H5Sclose(dataspace_id);

   status = H5Dclose(dataset_id);

   dims[0] = 5;
   dims[1] =1;
   dataspace_id = H5Screate_simple(2, dims, NULL);

   dataset_id = H5Dcreate2(hdf5Handle, "/State/ArmJointPosition/arm_jnt_pos", H5T_IEEE_F64BE, dataspace_id,
                          H5P_DEFAULT, H5P_DEFAULT, H5P_DEFAULT);

   status = H5Dwrite(dataset_id, H5T_NATIVE_DOUBLE, H5S_ALL, H5S_ALL, H5P_DEFAULT,
                     arm_jnt_pos);

   status = H5Sclose(dataspace_id);

   status = H5Dclose(dataset_id);

   dims[0] = 1;
   dims[1] =1;
   dataspace_id = H5Screate_simple(2, dims, NULL);

   dataset_id = H5Dcreate2(hdf5Handle, "/State/BaseCartesianPosition/Vector/x", H5T_IEEE_F64BE, dataspace_id,
                          H5P_DEFAULT, H5P_DEFAULT, H5P_DEFAULT);

   status = H5Dwrite(dataset_id, H5T_NATIVE_DOUBLE, H5S_ALL, H5S_ALL, H5P_DEFAULT,
                     kdl_vector_x);

   status = H5Dclose(dataset_id);

   dataset_id = H5Dcreate2(hdf5Handle, "/State/BaseCartesianPosition/Vector/y", H5T_IEEE_F64BE, dataspace_id,
                          H5P_DEFAULT, H5P_DEFAULT, H5P_DEFAULT);

   status = H5Dwrite(dataset_id, H5T_NATIVE_DOUBLE, H5S_ALL, H5S_ALL, H5P_DEFAULT,
                     kdl_vector_y);

   status = H5Dclose(dataset_id);

   dataset_id = H5Dcreate2(hdf5Handle, "/State/BaseCartesianPosition/Vector/z", H5T_IEEE_F64BE, dataspace_id,
                          H5P_DEFAULT, H5P_DEFAULT, H5P_DEFAULT);

   status = H5Dwrite(dataset_id, H5T_NATIVE_DOUBLE, H5S_ALL, H5S_ALL, H5P_DEFAULT,
                     kdl_vector_z);

   status = H5Sclose(dataspace_id);

   status = H5Dclose(dataset_id);

   dims[0] = 9;
   dims[1] =1;
   dataspace_id = H5Screate_simple(2, dims, NULL);

   dataset_id = H5Dcreate2(hdf5Handle, "/State/BaseCartesianPosition/Rotation/rotation", H5T_IEEE_F64BE, dataspace_id,
                          H5P_DEFAULT, H5P_DEFAULT, H5P_DEFAULT);

   status = H5Dwrite(dataset_id, H5T_NATIVE_DOUBLE, H5S_ALL, H5S_ALL, H5P_DEFAULT, 
                     kdl_rotation_data); 
 
   status = H5Sclose(dataspace_id); 
 
   status = H5Dclose(dataset_id);

  //H5Gclose(group_id);
  //hid_t memspace = H5Screate_simple(1, &arraySize, NULL);
  //hid_t dataset = H5Dcreate(hdf5Handle, "Data0", H5T_NATIVE_INT, memspace,
      //H5P_DEFAULT, H5P_DEFAULT, H5P_DEFAULT);
  //hid_t dataspace = H5S_ALL;
//
  //H5Dwrite(dataset, H5T_NATIVE_INT, memspace, dataspace, H5P_DEFAULT, array);
  //if (dataspace != H5S_ALL) {
    //H5Sclose(dataspace);
  //}
  //if (memspace != H5S_ALL) {
    //H5Sclose(memspace);
  //}
  //H5Dclose(dataset);

  H5Fclose(hdf5Handle);

  //std::cout << "Attempt to Read Data" << std::endl;
//
  //// Set up file access property list with parallel I/O
  //fapl = H5Pcreate(H5P_FILE_ACCESS);
//
  //H5Pset_fapl_dsm(fapl, comm, NULL, 0);
//
  //hdf5Handle = H5Fopen("dsm", H5F_ACC_RDONLY, fapl);
//
  //// Close property list
  //H5Pclose(fapl);
//
  //dataset = H5Dopen(hdf5Handle, "Data0", H5P_DEFAULT);
  //dataspace = H5Dget_space(dataset);
  //hssize_t numVals = H5Sget_simple_extent_npoints(dataspace);
  //hid_t datatype = H5Dget_type(dataset);
//
  //std::cout << "Number of Values Read: " << numVals << std::endl;
  //H5Dread(dataset, datatype, H5S_ALL, dataspace, H5P_DEFAULT, &read_array);
  //for(unsigned int i = 0; i < numVals; ++i) {
    //if (array[i] != read_array[i]) {
      //fprintf(stderr," read_array[%d] is %d, should be %d\n", i, read_array[i], array[i]);
    //}
  //}
//
  //H5Tclose(datatype);
  //H5Sclose(dataspace);
  //H5Dclose(dataset);
  //H5Fclose(hdf5Handle);

  senderFinalize(dsmManager, &comm);
  delete dsmManager;
  return(EXIT_SUCCESS);
}
